gt()%>%
fmt_number(decimals = 2)
continuous_vars<- df%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(min = min, max = max, median = median, mean = mean, sd = sd), .names = "{.col}__{.fn}"))%>%
#tidyr::pivot_longer(cols = everything(), names_to = c("var", ".value"), names_sep = "__")%>%
pivot_longer(cols = everything(), names_to = "name", values_to = "value")%>%
separate_wider_delim(cols = name, names = c("variable", "statistic"), delim = "__")
cat_vars<- df%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
count(gender)%>%
mutate(proportion = 100*n/sum(n))%>%
pivot_longer(cols = c(n, proportion), names_to = "statistic", values_to = "value")%>%
rename(variable = gender)
rbind(continuous_vars, cat_vars)%>%
gt()%>%
fmt_number(decimals = 2)
# Read in the precarity data
precairyt_df<- read.csv("../Data/Processed Data/ELSA Subset with Elastic Net Precarity Index.csv")
View(precairyt_df)
# Read in the precarity data
precarity_df<- read.csv("../Data/Processed Data/ELSA Subset with Elastic Net Precarity Index.csv")
rm(precairyt_df)
library(dplyr)
library(tidyr)
library(gt)
setwd("C:/Users/lrowley/OneDrive - University of Edinburgh/Published Paper GitHub Repositories/New Frailty and Social Risks/Analysis")
rm(list = ls())
# Read in frailty data with social risk markers
full_df<- readstata13::read.dta13("../Data/Processed Data/ELSA Frailty and Social Risks Analysis Dataset.dta", nonint.factors = T)
# Read in the precarity data and join to the main data
precarity_df<- read.csv("../Data/Processed Data/ELSA Subset with Elastic Net Precarity Index.csv")
View(precarity_df)
library(dplyr)
library(tidyr)
library(gt)
setwd("C:/Users/lrowley/OneDrive - University of Edinburgh/Published Paper GitHub Repositories/New Frailty and Social Risks/Analysis")
rm(list = ls())
# Read in frailty data with social risk markers
full_df<- readstata13::read.dta13("../Data/Processed Data/ELSA Frailty and Social Risks Analysis Dataset.dta", nonint.factors = T))
library(dplyr)
library(tidyr)
library(gt)
setwd("C:/Users/lrowley/OneDrive - University of Edinburgh/Published Paper GitHub Repositories/New Frailty and Social Risks/Analysis")
rm(list = ls())
# Read in frailty data with social risk markers
full_df<- readstata13::read.dta13("../Data/Processed Data/ELSA Frailty and Social Risks Analysis Dataset.dta", nonint.factors = T)
# Drop any rows with missing frailty outcome
df<- full_df%>%
filter(!is.na(frailty_index))
# Drop those below 50
df<- df%>%
filter(age >= 50)
# Select relevant variables (replace wealth percentile and income percentile with the raw values, so that they have meaningful summary statistics)
stressors<- c("hatotb", "hitot", "not_enough_future",  "benefits", "has_no_occ_pension", "has_no_personal_pension", "reduced_pension", "ever_unemployed", "ever_invol_job_loss", "ever_unpaid_care", "ever_left_job_to_care", "ever_mixed_work_care", "widowed", "divorced", "lives_alone", "renting", "housing_problems", "ever_homeless", "fuel_poverty", "food_insecurity", "not_enough_money")
df<- df%>%
select(idauniq, wave, frailty_index, age, gender, all_of(stressors))
df<- df%>%
rename(wealth = hatotb,
income = hitot)
# Filter to rows without missing data
df<- df%>%
filter(if_all(everything(), ~!is.na(.x)))
full_df%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(min = min, max = max, median = median, mean = mean, sd = sd), .names = "{.col}__{.fn}"))%>%
pivot_longer(cols = everything(), names_to = "name", values_to = "value")%>%
separate_wider_delim(cols = name, names = c("variable", "statistic"), delim = "__")
full_df<- full_df%>%
rename(wealth = hatotb,
income = hitot)
full_df%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(min = min, max = max, median = median, mean = mean, sd = sd), .names = "{.col}__{.fn}"))%>%
pivot_longer(cols = everything(), names_to = "name", values_to = "value")%>%
separate_wider_delim(cols = name, names = c("variable", "statistic"), delim = "__")
full_df%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(min = min, max = max, median = median, mean = mean, sd = sd), .names = "{.col}__{.fn}", na.rm = T))%>%
pivot_longer(cols = everything(), names_to = "name", values_to = "value")%>%
separate_wider_delim(cols = name, names = c("variable", "statistic"), delim = "__")
full_df%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(min = ~min(.x, na.rm =T), max = max, median = median, mean = mean, sd = sd), .names = "{.col}__{.fn}"))%>%
pivot_longer(cols = everything(), names_to = "name", values_to = "value")%>%
separate_wider_delim(cols = name, names = c("variable", "statistic"), delim = "__")
full_df%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(min = ~min(.x, na.rm =T), max = max, median = median, mean = ~mean(.x, na.rm = T), sd = sd), .names = "{.col}__{.fn}"))%>%
pivot_longer(cols = everything(), names_to = "name", values_to = "value")%>%
separate_wider_delim(cols = name, names = c("variable", "statistic"), delim = "__")
full_df%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(min = ~min(.x, na.rm =T), max = max, median = median, mean = ~mean(.x, na.rm = T), sd = sd), .names = "{.col}__{.fn}"))
View(full_df)
dplyr::last_dplyr_warnings()
full_df%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()
full_df%>%
filter(inw == "1.resp,alive")%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()
full_df%>%
filter(inw == "1.resp,alive")%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(min = ~min(.x, na.rm =T), max = max, median = median, mean = ~mean(.x, na.rm = T), sd = sd), .names = "{.col}__{.fn}"))
full_df%>%
filter(inw == "1.resp,alive")%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(min = ~min(.x, na.rm =T), max = ~max(.x, na.rm = T), median = ~median(.x, na.rm = T), mean = ~mean(.x, na.rm = T), sd = ~sd(na.rm = T)), .names = "{.col}__{.fn}"))
full_df%>%
filter(inw == "1.resp,alive")%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(min = ~min(.x, na.rm =T), max = ~max(.x, na.rm = T), median = ~median(.x, na.rm = T), mean = ~mean(.x, na.rm = T), sd = ~sd(.x, na.rm = T)), .names = "{.col}__{.fn}"))%>%
pivot_longer(cols = everything(), names_to = "name", values_to = "value")%>%
separate_wider_delim(cols = name, names = c("variable", "statistic"), delim = "__")
# Drop those below 50
full_df<- full_df%>%
filter(age >= 50)
full_df%>%
filter(inw == "1.resp,alive")%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(min = ~min(.x, na.rm =T), max = ~max(.x, na.rm = T), median = ~median(.x, na.rm = T), mean = ~mean(.x, na.rm = T), sd = ~sd(.x, na.rm = T)), .names = "{.col}__{.fn}"))%>%
pivot_longer(cols = everything(), names_to = "name", values_to = "value")%>%
separate_wider_delim(cols = name, names = c("variable", "statistic"), delim = "__")
full_df%>%
filter(inw == "1.resp,alive")%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(median = ~median(.x, na.rm = T), mean = ~mean(.x, na.rm = T)), .names = "{.col}__{.fn}"))%>%
pivot_longer(cols = everything(), names_to = "name", values_to = "value")%>%
separate_wider_delim(cols = name, names = c("variable", "statistic"), delim = "__")
full_df%>%
filter(inw == "1.resp,alive")%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(median = ~median(.x, na.rm = T), mean = ~mean(.x, na.rm = T)), .names = "{.col}__{.fn}"))%>%
pivot_longer(cols = everything(), names_to = "name", values_to = "full_sample_value")%>%
separate_wider_delim(cols = name, names = c("variable", "statistic"), delim = "__")
full_sample_cont_variables<- full_df%>%
filter(inw == "1.resp,alive")%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(median = ~median(.x, na.rm = T), mean = ~mean(.x, na.rm = T)), .names = "{.col}__{.fn}"))%>%
pivot_longer(cols = everything(), names_to = "name", values_to = "full_sample_value")%>%
separate_wider_delim(cols = name, names = c("variable", "statistic"), delim = "__")
analytic_sample_cont_variables<- df%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(median = ~median(.x, na.rm = T), mean = ~mean(.x, na.rm = T)), .names = "{.col}__{.fn}"))%>%
pivot_longer(cols = everything(), names_to = "name", values_to = "analytic_sample_value")%>%
separate_wider_delim(cols = name, names = c("variable", "statistic"), delim = "__")
cont_variables<- left_join(full_sample_cont_variables, analytic_sample_cont_variables)
View(full_df)
View(cont_variables)
cont_variables%>%
gt()%>%
fmt_number(decimals = 2)
analytic_sample_cont_variables<- df%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(mean = ~mean(.x, na.rm = T)), .names = "{.col}__{.fn}"))%>%
pivot_longer(cols = everything(), names_to = "name", values_to = "analytic_sample_value")%>%
separate_wider_delim(cols = name, names = c("variable", "statistic"), delim = "__")
full_sample_cont_variables<- full_df%>%
filter(inw == "1.resp,alive")%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(median = ~median(.x, na.rm = T), mean = ~mean(.x, na.rm = T)), .names = "{.col}__{.fn}"))%>%
pivot_longer(cols = everything(), names_to = "name", values_to = "full_sample_value")%>%
separate_wider_delim(cols = name, names = c("variable", "statistic"), delim = "__")
cont_variables<- left_join(full_sample_cont_variables, analytic_sample_cont_variables)
cont_variables%>%
gt()%>%
fmt_number(decimals = 2)
full_sample_cont_variables<- full_df%>%
filter(inw == "1.resp,alive")%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(mean = ~mean(.x, na.rm = T)), .names = "{.col}__{.fn}"))%>%
pivot_longer(cols = everything(), names_to = "name", values_to = "full_sample_value")%>%
separate_wider_delim(cols = name, names = c("variable", "statistic"), delim = "__")
analytic_sample_cont_variables<- df%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
summarise(across(c(age, frailty_index, wealth, income), list(mean = ~mean(.x, na.rm = T)), .names = "{.col}__{.fn}"))%>%
pivot_longer(cols = everything(), names_to = "name", values_to = "analytic_sample_value")%>%
separate_wider_delim(cols = name, names = c("variable", "statistic"), delim = "__")
cont_variables<- left_join(full_sample_cont_variables, analytic_sample_cont_variables)
cont_variables%>%
gt()%>%
fmt_number(decimals = 2)
full_df%>%
filter(inw == "1.resp,alive")%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
count(gender)%>%
mutate(proportion = 100*n/sum(n))%>%
pivot_longer(cols = c(n, proportion), names_to = "statistic", values_to = "value")%>%
rename(variable = gender)
full_df%>%
filter(inw == "1.resp,alive")%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
count(gender)%>%
mutate(proportion = 100*n/sum(n))%>%
select(-n)%>%
pivot_longer(cols = c(proportion), names_to = "statistic", values_to = "value")%>%
rename(variable = gender)
full_sample_cat_variables<- full_df%>%
filter(inw == "1.resp,alive")%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
count(gender)%>%
mutate(proportion = 100*n/sum(n))%>%
select(-n)%>%
pivot_longer(cols = c(proportion), names_to = "statistic", values_to = "value")%>%
rename(variable = gender)
analytic_sample_cat_variables<- df%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
count(gender)%>%
mutate(proportion = 100*n/sum(n))%>%
select(-n)%>%
pivot_longer(cols = c(proportion), names_to = "statistic", values_to = "value")%>%
rename(variable = gender)
cat_variables<- left_join(full_sample_cat_variables, analytic_sample_cat_variables)
cat_variables%>%
gt()%>%
fmt_number(decimals = 2)
full_sample_cat_variables<- full_df%>%
filter(inw == "1.resp,alive")%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
count(gender)%>%
mutate(proportion = 100*n/sum(n))%>%
select(-n)%>%
pivot_longer(cols = c(proportion), names_to = "statistic", values_to = "full_sample_value")%>%
rename(variable = gender)
analytic_sample_cat_variables<- df%>%
group_by(idauniq)%>%
slice_min(wave, n = 1)%>%
ungroup()%>%
count(gender)%>%
mutate(proportion = 100*n/sum(n))%>%
select(-n)%>%
pivot_longer(cols = c(proportion), names_to = "statistic", values_to = "analytic_sample_value")%>%
rename(variable = gender)
cat_variables<- left_join(full_sample_cat_variables, analytic_sample_cat_variables)
cat_variables%>%
gt()%>%
fmt_number(decimals = 2)
tbl<- rbind(cont_variables, cat_variables)
tbl%>%
gt()%>%
fmt_number(decimals = 2)
# Look at the sample sizes of the full and analytic sample
n_distinct(full_df$idauniq)
n_distinct(df$idauniq)
library(dplyr)
library(ggplot2)
library(patchwork)
library(caret)
library(glmnet)
setwd("C:/Users/lrowley/OneDrive - University of Edinburgh/Published Paper GitHub Repositories/New Frailty and Social Risks/Analysis")
rm(list = ls())
asti
load("../Models/Elastic Net FI Model.Rda")
View(cv_fit)
coef(cv_fit, s = "lambda.min")
library(dplyr)
library(tidyr)
library(ggplot2)
library(readxl)
setwd("C:/Users/lrowley/OneDrive - University of Edinburgh/Published Paper GitHub Repositories/New Frailty and Social Risks/Analysis")
rm(list = ls())
estimates_a<- read_excel(path = "../Model Results/Model 1.xlsx")
setwd("C:/Users/lrowley/OneDrive - University of Edinburgh/Published Paper GitHub Repositories/New Frailty and Social Risks/Analysis")
rm(list = ls())
estimates_a<- read_excel(path = "../Model Results/Model 1.xlsx")
estimates_a<- readxl::read_excel(path = "../Model Results/Model 1.xlsx")
dir(".")
dir("../")
dir("../Model Results")
library(dplyr)
library(tidyr)
library(ggplot2)
library(readxl)
setwd("C:/Users/lrowley/OneDrive - University of Edinburgh/Published Paper GitHub Repositories/New Frailty and Social Risks/Analysis")
rm(list = ls())
estimates_a<- readxl::read_excel(path = "../Model Results/Model 1.xlsx")
estimates_a$term[13]<- "Does not provide unpaid care"
estimates_a$term[24]<- "No problems"
estimates_a$term[29]<- "Never - food insecurity"
estimates_a$term[32]<- "Never - enough money"
estimates_a<- estimates_a%>%
mutate(variable = case_when(term == "wealth_percentile" ~ "**Wealth percentile**",
term == "income_percentile" ~ "**Income percentile**",
term == "benefits" ~ "**Receiving benefits (ref: No)**: _Yes_",
term == "has_no_occ_pension" ~ "**No occupational pension (ref: No)**: _Yes_",
term == "has_no_personal_pension" ~ "**No personal pension (ref: No)**: _Yes_",
term == "reduced_pension" ~ "**Retried on reduced pension (ref: No)**: _Yes_",
term == "ever_unemployed" ~ "**Ever unemployed (ref: No)**: _Yes_",
term == "ever_invol_job_loss" ~ "**Ever experienced job loss (ref: No)**: _Yes_",
term == "0 - 9 hours per week" ~ "**Maximum unpaid caregiving (ref: None)**: _0 - 9 hours per week_",
term == "10 - 34 hours per week" ~ "_10 - 34 hours per week_",
term == "35 hours per week or more" ~ "_35 hours per week or more_",
term == "ever_left_job_to_care" ~ "**Ever left job to provide unpaid care (ref: No)**: _Yes_",
term == "ever_mixed_work_care" ~ "**Ever mixed work and unpaid care (ref: No)**: _Yes_",
term == "widowed" ~ "**Widowed (ref: No)**: _Yes_",
term == "divorced" ~ ",**Divorced/separated (ref: No)**: _Yes_",
term == "lives_alone" ~ "**Lives alone (ref: No)**: _Yes_",
term == "renting" ~ "**Renting home (ref: No)**: _Yes_",
term == "1 - 2 problems" ~ "**Number of housing problems (ref: None)**: _1 - 2 problems_",
term == "3 - 4 problems" ~ "_3 - 4 problems_",
term == "5 problems or more" ~ "_5 problems or more_",
term == "ever_homeless" ~ "**Ever experienced homelessness (ref: No)**: _Yes_",
term == "fuel_poverty" ~ "**Fuel poverty (ref: No)**: _Yes_",
term == "At least yearly" ~ "**Frequency of food insecurity (ref: Never)**: _At least yearly_",
term == "At least monthly" ~ "_At least monthly_",
term == "Rarely" ~ "**Frequency of inability to cover needs (ref: Never)**: _Rarely_",
term == "Sometimes" ~ "_Sometimes_",
term == "Often" ~ "_Often_",
term == "Most of the time" ~ "_Most of the time_",
term == "not_enough_future" ~ "**Future financial insecurity**",
term == "age" ~ "**Age**",
term == "age # age" ~ "**Age-squared**",
T ~ term))
ordered_vars<- c("**Wealth percentile**",
"**Income percentile**",
"**Future financial insecurity**",
"**Receiving benefits (ref: No)**: _Yes_",
"**Fuel poverty (ref: No)**: _Yes_",
"**Frequency of food insecurity (ref: Never)**: _At least yearly_",
"_At least monthly_",
"**Frequency of inability to cover needs (ref: Never)**: _Rarely_",
"_Sometimes_",
"_Often_",
"_Most of the time_",
"**No occupational pension (ref: No)**: _Yes_",
"**No personal pension (ref: No)**: _Yes_",
"**Retried on reduced pension (ref: No)**: _Yes_",
"**Ever unemployed (ref: No)**: _Yes_",
"**Ever experienced job loss (ref: No)**: _Yes_",
"**Renting home (ref: No)**: _Yes_",
"**Number of housing problems (ref: None)**: _1 - 2 problems_",
"_3 - 4 problems_",
"_5 problems or more_",
"**Ever experienced homelessness (ref: No)**: _Yes_",
"**Widowed (ref: No)**: _Yes_",
",**Divorced/separated (ref: No)**: _Yes_",
"**Lives alone (ref: No)**: _Yes_",
"**Maximum unpaid caregiving (ref: None)**: _0 - 9 hours per week_",
"_10 - 34 hours per week_",
"_35 hours per week or more_",
"**Ever left job to provide unpaid care (ref: No)**: _Yes_",
"**Ever mixed work and unpaid care (ref: No)**: _Yes_")
estimates_a<- estimates_a%>%
mutate(variable = factor(variable, levels = rev(ordered_vars)))
estimates_b<- read_excel(path = "../Model Results/Model 5.xlsx")
estimates_b$term[13]<- "Does not provide unpaid care"
estimates_b$term[22]<- "No problems"
estimates_b$term[27]<- "Never - food insecurity"
estimates_b$term[30]<- "Never - enough money"
estimates_b<- estimates_b%>%
mutate(variable = case_when(term == "wealth_percentile" ~ "**Wealth percentile**",
term == "income_percentile" ~ "**Income percentile**",
term == "benefits" ~ "**Receiving benefits (ref: No)**: _Yes_",
term == "has_no_occ_pension" ~ "**No occupational pension (ref: No)**: _Yes_",
term == "has_no_personal_pension" ~ "**No personal pension (ref: No)**: _Yes_",
term == "reduced_pension" ~ "**Retried on reduced pension (ref: No)**: _Yes_",
term == "ever_unemployed" ~ "**Ever unemployed (ref: No)**: _Yes_",
term == "ever_invol_job_loss" ~ "**Ever experienced job loss (ref: No)**: _Yes_",
term == "0 - 9 hours per week" ~ "**Maximum unpaid caregiving (ref: None)**: _0 - 9 hours per week_",
term == "10 - 34 hours per week" ~ "_10 - 34 hours per week_",
term == "35 hours per week or more" ~ "_35 hours per week or more_",
term == "ever_left_job_to_care" ~ "**Ever left job to provide unpaid care (ref: No)**: _Yes_",
term == "ever_mixed_work_care" ~ "**Ever mixed work and unpaid care (ref: No)**: _Yes_",
term == "widowed" ~ "**Widowed (ref: No)**: _Yes_",
term == "divorced" ~ ",**Divorced/separated (ref: No)**: _Yes_",
term == "lives_alone" ~ "**Lives alone (ref: No)**: _Yes_",
term == "renting" ~ "**Renting home (ref: No)**: _Yes_",
term == "1 - 2 problems" ~ "**Number of housing problems (ref: None)**: _1 - 2 problems_",
term == "3 - 4 problems" ~ "_3 - 4 problems_",
term == "5 problems or more" ~ "_5 problems or more_",
term == "ever_homeless" ~ "**Ever experienced homelessness (ref: No)**: _Yes_",
term == "fuel_poverty" ~ "**Fuel poverty (ref: No)**: _Yes_",
term == "At least yearly" ~ "**Frequency of food insecurity (ref: Never)**: _At least yearly_",
term == "At least monthly" ~ "_At least monthly_",
term == "Rarely" ~ "**Frequency of inability to cover needs (ref: Never)**: _Rarely_",
term == "Sometimes" ~ "_Sometimes_",
term == "Often" ~ "_Often_",
term == "Most of the time" ~ "_Most of the time_",
term == "not_enough_future" ~ "**Future financial insecurity**",
term == "age" ~ "**Age**",
term == "age # age" ~ "**Age-squared**",
T ~ term))
ordered_vars<- c("**Wealth percentile**",
"**Income percentile**",
"**Future financial insecurity**",
"**Receiving benefits (ref: No)**: _Yes_",
"**Fuel poverty (ref: No)**: _Yes_",
"**Frequency of food insecurity (ref: Never)**: _At least yearly_",
"_At least monthly_",
"**Frequency of inability to cover needs (ref: Never)**: _Rarely_",
"_Sometimes_",
"_Often_",
"_Most of the time_",
"**No occupational pension (ref: No)**: _Yes_",
"**No personal pension (ref: No)**: _Yes_",
"**Retried on reduced pension (ref: No)**: _Yes_",
"**Ever unemployed (ref: No)**: _Yes_",
"**Ever experienced job loss (ref: No)**: _Yes_",
"**Renting home (ref: No)**: _Yes_",
"**Number of housing problems (ref: None)**: _1 - 2 problems_",
"_3 - 4 problems_",
"_5 problems or more_",
"**Ever experienced homelessness (ref: No)**: _Yes_",
"**Widowed (ref: No)**: _Yes_",
",**Divorced/separated (ref: No)**: _Yes_",
"**Lives alone (ref: No)**: _Yes_",
"**Maximum unpaid caregiving (ref: None)**: _0 - 9 hours per week_",
"_10 - 34 hours per week_",
"_35 hours per week or more_",
"**Ever left job to provide unpaid care (ref: No)**: _Yes_",
"**Ever mixed work and unpaid care (ref: No)**: _Yes_")
estimates_b<- estimates_b%>%
mutate(variable = factor(variable, levels = rev(ordered_vars)))
estimates_a$model<- "Model 1 (original)"
estimates_b$model<- "Model 5 (sensitivity analysis)"
estimates<- rbind(estimates_a, estimates_b)
estimates<- estimates%>%
mutate(domain = case_when(term %in% c("wealth_percentile", "income_percentile", "not_enough_future", "benefits", "fuel_poverty", "Never - food insecurity", "At least yearly", "At least monthly", "Never - not enough", "Rarely", "Sometimes", "Often", "Most of the time") ~ "Finances",
term %in% c("has_no_occ_pension", "has_no_personal_pension", "reduced_pension") ~ "Pensions",
term %in% c("ever_unemployed", "ever_invol_job_loss") ~ "Emplymt.",
term %in% c("0 - 9 hours per week", "10 - 34 hours per week", "35 hours per week or more", "ever_left_job_to_care", "ever_mixed_work_care") ~ "Unpaid caregiving",
term %in% c("widowed", "divorced", "lives_alone") ~ "Relationships",
term %in% c("renting", "1 - 2 problems", "3 - 4 problems", "5 problems or more", "ever_homeless") ~ "Housing")%>%
factor(levels = c("Finances", "Pensions", "Emplymt.", "Housing", "Relationships", "Unpaid caregiving")))
estimates<- estimates%>%
mutate(Coefficient = case_when(is.na(as.numeric(Coefficient)) ~ Coefficient,
T ~ as.character(round(as.numeric(Coefficient), 3))))
estimates<- estimates%>%
mutate(beta = stringr::str_remove_all(Coefficient, "\\*")%>%
as.numeric())%>%
separate(`95% CI`, sep = ",", into = c("conf.low", "conf.high"))%>%
mutate(conf.low = as.numeric(conf.low),
conf.high = as.numeric(conf.high))
estimates%>%
filter(!variable %in% c("Age", "Age-squared"))%>%
filter(!is.na(variable))%>%
ggplot()+
geom_vline(xintercept = 0, linetype = 2)+
geom_errorbar(aes(xmin = conf.low, xmax = conf.high, y = variable, group = model), width = 0, position = position_dodge(width = 0.5))+
geom_point(aes(x = beta, y = variable, color = model), position = position_dodge(width = 0.5), size = 2)+
#scale_color_manual(values = pal)+
theme_minimal()+
theme(legend.position = "bottom",
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
plot.background = element_rect(color = "white", fill = "white"),
text = element_text(size = 10),
axis.title.x = element_text(margin = margin(10,0,10,0), size = 10),
axis.title.y = element_text(margin = margin(0,10,0,10), size = 10),
axis.text = ggtext::element_markdown(size = 10),
plot.title.position = "plot",
plot.title = element_text(margin = margin(10,10,10,10)),
strip.text.y = element_text(size = 10),
strip.background = element_rect())+
labs(x = "Beta", y = "", color = "Model")+
facet_grid(domain ~ ., scales = "free_y", space = "free")
ggsave("../Plots/Supplementary Figure 1.jpg", units = "in", width = 9, height = 10, dpi = 500)
